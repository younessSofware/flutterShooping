buildscript {
    repositories {
        // ...
        maven { url 'https://plugins.gradle.org/m2/' } // Gradle Plugin Portal
    }
    dependencies {
        // ...
        // OneSignal-Gradle-Plugin
        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:[0.12.6, 0.99.99]'
    }
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


def envProperties = new Properties()
def envPropertiesFile = rootProject.file('../configs/env.properties')
if (envPropertiesFile.exists()) {
    envProperties.load(new FileInputStream(envPropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'


android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    tasks.withType(JavaCompile) {
        options.warnings = false
    }
    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId envProperties['androidPackageName']
        minSdkVersion 21
//        targetSdkVersion flutter.targetSdkVersion
        targetSdkVersion 33

        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        resConfigs "en"

        manifestPlaceholders += [
            envatoPurchaseCode: envProperties['envatoPurchaseCode'],
            appName: envProperties['appName'],
            websiteUrl: envProperties['websiteUrl'],
            websiteDomain: envProperties['websiteDomain'],
            customScheme: envProperties['customScheme'],
            googleApiKeyAndroid: envProperties['googleApiKeyAndroid'],
            adMobAppIdAndroid: envProperties['adMobAppIdAndroid'],
            facebookClientToken: envProperties['facebookClientToken'],
            facebookLoginProtocolScheme: envProperties['facebookLoginProtocolScheme']
        ]

        resValue 'string', 'facebookAppId', envProperties['facebookAppId']
    }

    signingConfigs {
        release {
            keyAlias envProperties['keyAlias']
            keyPassword envProperties['keyPassword']
            storeFile rootProject.file('../configs/' + envProperties['storeFile'])
            storePassword envProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    implementation 'com.google.android.material:material:1.6.0'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'androidx.browser:browser:1.3.0'
}
googleServices { disableVersionCheck = true }

task copyGoogleServices(type: Copy) {
    from '../../configs'
    include 'google-services.json'
    into '.'
}

task copyConfigFiles(type: Copy) {
    from '../../configs/customized/'
    include '**'
    into '../../'
}

preBuild.dependsOn(copyGoogleServices)
preBuild.dependsOn(copyConfigFiles)
